# do this even for non-interactive shells so `mosh home` works even if we're not already in a WSL session
exists () { command -v "$1" >/dev/null 2>&1; }
if ! [ "$SSH_AUTH_SOCK" ] && exists keychain; then
	eval "$(keychain --quiet --eval --agents ssh)"
	. ~/.keychain/$(hostname)-sh
fi

add_path () {
	PATH="$1:$PATH"
}

export CARGO_HOME="$HOME/.local/lib/cargo"
export RUSTUP_HOME="$HOME/.local/lib/rustup"
export CARGO_TARGET_DIR="$CARGO_HOME/target"
export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
export STEEL_LSP_HOME="$HOME/.config/helix/steel-lsp"
export GOPATH=~/.local/lib/go
export GOBIN="$GOPATH/bin"
# less documents that it searches here by default, but the docs are wrong
export LESSKEYIN="$HOME/.config/lesskey"

if [ -f ~/.local/profile ]; then
	. ~/.local/profile
fi

# note: the order is important, the latest addition takes precedence
# wtf ubuntu
if ! exists cowsay && [ -e /usr/games/cowsay ]; then
	add_path /usr/games
fi
if exists snap && snap_bin=$(snap debug paths | grep '^SNAPD_BIN='); then
	eval "$snap_bin"
	add_path "$SNAPD_BIN"
	unset snap_bin
fi
add_path "$GOBIN"
add_path "$CARGO_HOME"/bin

DOTFILES=$(dirname "$(realpath ~/.profile)")/..
add_path "$DOTFILES/bin"
# add this even if it's not present, in case we create it later
add_path "$HOME/.local/bin"
if [ -d /opt/nvim ]; then
	 add_path /opt/nvim/bin
fi
# needs to be added after everything else, since one of them might add node to path
if exists node && ! exists npm; then
	# note: `npm config get prefix` is atrociously slow
	add_path "$(dirname "$(realpath "$(command -v node)")")"
fi

if exists nvim; then
	export EDITOR=editor-hax
	export VISUAL=editor-hax
	export LESSEDIT='%E %g?lm\:%lm'
	# julia has AWFUL defaults and doesn't wait for the editor to exit if it doesn't recognize it
	# https://github.com/JuliaLang/julia/blob/083bd8f687bb2a0608a1b0b4c99f811eecb56b3e/stdlib/InteractiveUtils/src/editless.jl#L49
	export JULIA_EDITOR=hx-hax  
else
	export EDITOR=vim
	export VISUAL=vim
	export JULIA_EDITOR=open
fi

# get ctrl+shift+u for unicode input to work in kitty
export GLFW_IM_MODULE=ibus
# read .inputrc
export ydb_readline=1

case "$-" in
	*i*) ;;
	*)	return 0;;
esac

# bash shell and haven't sourced bashrc
if [ "$BASH_VERSION" ]; then
	. ~/.bashrc
fi
# zsh shell and haven't sourced zshrc
if [ "$ZSH_VERSION" ]; then
	. ~/.zshrc
fi
if [ -n "$PROFILE_READ" ]; then
	return 0
fi
PROFILE_READ=1

. "$DOTFILES/lib/lib.sh"

# TODO: work this into gitconfig somehow
git_reset_author() {
	git -c user.email="$1" rebase "$2" --reset-author -x 'git commit --amend --no-edit --reset-author'
}

is_jj_repo() {
	# don't try to save the working copy, in case that hits an error
	jj workspace root --ignore-working-copy >/dev/null 2>/dev/null
}

show_conflicts() {
	jj diff --from @-- --to @- "$(jj resolve --list | awk '{print $1}')" --git | grepdiff --output-matching=hunk '<<<<<<<' | less
}

HEAD() {
	if is_jj_repo; then
		jj git fetch && jj new -r 'trunk()'
	else
		git fetch --quiet origin && git switch --detach origin/HEAD "$@"
	fi
}

[ -x /usr/bin/lesspipe ] && {
	export LESSOPEN="| /usr/bin/lesspipe %s";
	export LESSCLOSE="/usr/bin/lesspipe %s %s";
}

mkcd () { mkdir -p "$@" && cd "$1"; }

alias e=$EDITOR
alias E=hx-hax
alias mkdc=mkcd
alias yts=youtube_search
alias ytd=yt-dlp
alias cls=clear
alias c=cargo
alias m=make
alias g=git
alias o=open
alias v=nvim
alias y=build/yottadb
# uppercase is bad and it should feel bad
alias r=R
# NOTE: this *must not* be an external process.
# scoping it to an alis prevents it from extending to subprocesses, which is important because `tmux-resurrect` uses cat.
alias cat=bat
# this shadows a mailcap command, but I've never used mailcap in my life
alias dc=docker-compose
alias compose=docker-compose
alias powershell=pwsh

# you might also want to pass `-C` for context
diff () { command diff --color "$@"; }

# follow symlinks by default
rg () { command rg -z -L --no-heading "$@"; }

# note: the `cd` makes tmux open helix in the right working directory
b () {
	builtin cd "$(cargo metadata --format-version 1| jq .workspace_root -r)" && bacon "$@"
}

# show human-readable dates with offsets by default
dmesg () { command dmesg -e "$@"; }

whatismyip() {
	# https://unix.stackexchange.com/a/194136
	dig +short myip.opendns.com @resolver4.opendns.com
}

what_belongs () {
	if command -v dpkg > /dev/null; then
		dpkg -L "$@"
	elif command -v rpm > /dev/null; then
		rpm -ql "$@"
	else
		echo "no supported package manager found" >&2
	fi
}

what_runs () {
	for file in $(what_belongs "$@"); do
		[ -f "$file" ] && [ -x "$file" ] && echo "$file"
	done
}

what_package () {
	prog="$(realpath "$1")"; shift
	if command -v dpkg > /dev/null; then
		dpkg -S "$(command -v "$prog")" "$@"
	elif command -v rpm > /dev/null; then
		rpm -qf "$(command -v "$prog")" "$@"
	else
		echo "no supported package manager found" >&2
	fi
}

alias belongs=what_belongs
alias runs=what_runs
alias package=what_package

exa () { command exa --git "$@"; }

# don't replace crontab without warning
crontab() {
	if command crontab -i -l >/dev/null 2>/dev/null; then
		crontab () { command crontab -i "$@"; }
	else
		crontab () { command crontab "$@"; }
	fi
	crontab "$@"
}

# show a makefile as a dependency graph
visualize () {
	command -v makefile2graph > /dev/null || { echo "makefile2graph not found"; return 1; }
	command -v dot > /dev/null || { echo "dot not found"; return 1; }
	command -v xdot > /dev/null || { echo "xdot not found"; return 1; }
	makefile2graph | dot | xdot /dev/stdin
}

# don't show copyright every time (super annoying)
gdb () { command gdb -q "$@"; }

# for use with a makefile in the current directory
tasks () {
	make -npRr | \
	awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | \
	grep -v "^[#$(printf '\t')]" | sed 's/:.*$//'
}

# same as tasks, but show body of recipe
recipies () {
	make -npRr | \
	awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | \
	grep -v "^#"
}

# launch and disown a command
background () {
	if [ $# -eq 0 ]
		then echo usage: background '<command>'
		return 1
	else
		"$@" &
		disown
	fi
}

show_time () { watch -n 1 -t date; }

# zip recursively by default
zip () { command zip -r "$@"; }

save_power () { sudo powertop --auto-tune; }

clean_shell () {
    env -i HOME="$HOME" TERM="$TERM" "$(command -v bash)" --noprofile --rcfile /etc/profile
}

if exists fls; then
	ls() { fls "$@"; }
else
	ls () {
		if command ls --hyperlink=auto --color=auto --ignore=__pycache__ >/dev/null 2>/dev/null; then
			ls () { command ls --hyperlink=auto --color=auto --ignore=__pycache__ "$@"; }
		else
			ls() { command ls "$@"; }
		fi
		ls "$@"
	}
fi

ip() { command ip --color "$@"; }

purge_removed () {
	dpkg -l | awk '/^rc/ {print $2}' | xargs sudo dpkg --purge
}

alias purge='sudo apt autoremove --purge'
alias restart='shutdown -r now'
alias sl=ls
alias ll='ls -l'
alias la='ls -A'
alias l='ls -F'
# files on disk
alias file_count='locate -S'


webpaste () {
   nc termbin.com 9999
}

ascii () { command man ascii; }

excuse () {
	telnet towel.blinkenlights.nl 666 2>/dev/null | tail -2 | cowsay -f dragon
}

status () {
	# jj is slow :(
	#if is_jj_repo; then
	#	# jj status
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = true ]; then
		git s
	else
		l
	fi
}
alias s=status

dad () { curl https://icanhazdadjoke.com && echo; }

weather () { curl wttr.in/; }
alias wttr=weather

pytime () { python -m timeit; }

alias ubuntu='docker run -it ubuntu'

pip_upgrade_all () {
	pip list | awk '{print $1}' | tail --lines=+3 | xargs pip install -U "$@"
}

# show default tmux config https://superuser.com/a/560941
tmux_default() {
	tmux -L unconfigured -f /dev/null start-server \; list-keys \;
}

fork_github() {
	case $1 in
		https://*|ssh://*|git@*) URL=$1;;
		*) URL=https://github.com/$1;;
	esac

	# https://stackoverflow.com/a/13840631
	DIR=$(echo "$URL" | sed -e 's|/$||' -e 's|:*/*\.git$||' -e 's|.*[/:]||g')
	HOST=$(echo "$URL" | sed -e 's,^https://,,; s/^[^@]*@//' | cut -d: -f1 | cut -d/ -f1)
	git clone "$URL" "$DIR" || return

	builtin cd "$DIR" || return
	git remote rename origin upstream
	git remote add origin "git@$HOST:jyn514/$DIR".git
	echo "$DIR"
}

GITHUB='https://github.com/'
MY_GITHUB='https://github.com/jyn514'
SRC="/usr/local/src"

export GPG_TTY=$(tty)
export ENV="$HOME/.profile"
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
if [ "$DISPLAY" ]; then
	if is_wsl; then
		MANOPT=--html=$DOTFILES/bin/firefox.sh
		export MANOPT
	else
		# you know what unix if you can't come up with working hyperlinks in 50 years then fuck you too
		man() {
			local section
			case "$1" in
				-*) command man "$@"; return;;
				*) if rg '^SECTION' /etc/manpath.config | \
				      awk 'BEGIN { arg="'"$1"'"; code=1 } {for (i=2; i<=NF; i++) if($i == arg) { code=0 }} END { exit code }'
				   then
					    section=$1
							shift
					 fi
			esac
			if [ $# -ne 1 ]; then
				# oops something went wrong
				command man "$section" "$@"
				return
			fi

			check() {
				[ 200 = "$(curl -I -m 1 -s -o /dev/null -w "%{http_code}" "$@")" ]
			}

			url=https://man.openbsd.org/$1${section:+.$section}
			if check "$url"; then
				xdg-open "$url"
				return
			fi
			if ! [ "$section" ]; then
				section=$(man -k "$1" | rg "^$1" | head -n1 | awk '{print $2}' | tr -d '()')
			fi
			url=https://manpages.ubuntu.com/manpages/$(lsb_release -cs)/man$section/$1.$section.html
			if check "$url"; then
				xdg-open "$url"
				return
			fi
			command man "$section" "$@"
		}
	fi
fi
export JUPYTER_CONFIG_DIR=~/.config/jupyter
export JAVA_HOME=/usr/lib/jvm/default-java
export BAT_TABS=8
export BAT_STYLE=changes,header,rule
export CARGO_MOMMYS_MOODS=ominous
export FZF_DEFAULT_OPTS='--cycle --exit-0 --select-1 --preview-window=wrap'

# git treats `diff.external` extremely poorly; there's no way to unset it temporarily because `-c diff.external` tries to run an empty program.
# instead, set this through an external env variable so we can unset it with `env -u`.
# difft is super buggy though :( ignoring it for now
# export GIT_EXTERNAL_DIFF=difft

# Delta is bad at doing version detection.
# https://github.com/dandavison/delta/issues/488
if ! less --version >/dev/null 2>&1; then
  export GIT_PAGER=less
fi

export MAKEFLAGS='-j4'
# for http://overthewire.org
# Honestly if you want to use this I don't really mind
export OTWUSERDIR="/d/SERPjdbrX3w3tsyXQQt0"

awawa_handler() {
	{ if exists figlet; then figlet "$1!!!"; else echo "$1!!!"; fi
        } | cowsay -f "$DOTFILES"/lib/angel.cow -n
}

# really this is a bash/zsh thing, but sh just ignores this function if it doesn't support it
command_not_found_handle() {
	case "$1" in
		# awawawa!
		awa|awawa*) awawa_handler "$@"; return 0;;
		# check if we forgot to put a space between `g` and the git subcommand, but not for `gh`, which is its own command
		gh) ;;
		g*) sub=${1#*g}
		if git --list-cmds=list-mainporcelain,others,nohelpers,alias,config | grep "^$sub$" --quiet; then
			shift
			git "$sub" "$@"
			return $?
		fi;;
		# this is kinda cursed
		cc) ;;
		# lol, lmao
		cargo) ;;
		c) ;;
		c*) sub=${1#*c}
		if cargo --list | awk '{print $1}' | grep "^$sub$" --quiet; then
			shift
			cargo "$sub" "$@"
			return $?
		fi;;
	esac

	# this looks weird because it uses absolute paths. we're the command-not-found handler, we don't want to call ourselves indefinitely.
	if CNF=$(command -v command-not-found 2>/dev/null); then
		$CNF -- "$1"
		return $?
	# TODO: this is slow, consider https://github.com/oneElectron/brew-command-not-found
	elif BREW=$(command -v brew 2>/dev/null) && CMD=$($BREW which-formula --explain "$1") && [ "$CMD" ]; then
		echo "$CMD"
		return 127
	else
		printf "%s: command not found\n" "$1" >&2
		return 127
	fi
}
command_not_found_handler() { command_not_found_handle "$@"; }

# zsh uses `{%` instead of `\01`: https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Visual-effects
if [ -n "$ZSH_VERSION" ]; then
	ansi_escape () { printf "%%{$1%%}"; }
else
	ansi_escape () { command printf "\01$1\02"; }
fi

PROMPT_DIRTRIM=2

display_pwd () {
	# reimplementation of PROMPT_DIRTRIM in pure shell
	# is this good
	# do you like this

	# 1. substitute $HOME with ~
	# 2. first group: match first character (~ or /)
	# 3. anything in the middle
	# 4. second group: last $PROMPT_DIRTRIM directories
	pwd | sed "s#$HOME#~#; s#^\(~\?/\).*\(\(/[^/]\+\)\{$PROMPT_DIRTRIM\}\)#\1...\2#"
}

# see `dotfiles/bin/ansi --color-table` for an example of how these render

RED="$(ansi_escape "\033[0;31m")"
GREEN="$(ansi_escape "\033[0;32m")"
YELLOW="$(ansi_escape "\033[0;33m")"
BLUE="$(ansi_escape "\033[0;34m")"
RESET="$(ansi_escape "\033[0;0m")"

FAINT_RED="$(ansi_escape "\033[2;31m")"
FAINT_GREEN="$(ansi_escape "\033[2;32m")"
FAINT_YELLOW="$(ansi_escape "\033[2;33m")"
FAINT_BLUE="$(ansi_escape "\033[2;34m")"
FAINT_WHITE="$(ansi_escape "\033[2;37m")"

jj_info() {
	# jj doesn't really use branches, so we don't print anything other than whether the workspace is modified
	# if there are branches, this is probably a co-located git repo, so `git_info` will just work without having to call this function.

	# NOTE: as a side effect, this saves the working copy :3
	# if there's an error here, we'll see it because we don't redirect stderr.
	if [ "$(jj diff --summary | wc -l)" = 0 ]; then
		printf %s "$FAINT_GREEN"
	else
		printf %s "$FAINT_RED"
	fi
	printf ' jj'
}

git_info() {
  # if this isn't a git repo, we can't show anything useful
	if ! git rev-parse --git-dir >/dev/null 2>&1; then
		if is_jj_repo; then jj_info; fi
		return
	else
		printf ' '
	fi

	# if we have local modifications, show the status in red
	if git diff-index --quiet HEAD -- 2>/dev/null; then
		printf %s "$FAINT_GREEN"
	# weird edge case: this could be a repo with no commits at all
	elif [ "$(find . -maxdepth 1 | wc -l)" -le 2 ]; then
		printf %s "$FAINT_GREEN"
	else
		printf %s "$FAINT_RED"
	fi

	# if HEAD is on a branch, point to that branch
	if git symbolic-ref --short HEAD 2>/dev/null; then
		return
	fi

	# next, see if this is a tag
	t=$(git tag --points-at HEAD)
	if [ "$t" ]; then
		echo "$t"
		return
	fi

	# see if this is a remote branch
	# note this prioritizes origin/HEAD over origin/main
	r=$(git show-ref | grep "^$(git rev-parse @).* refs/remotes" | grep -v '/gh-readonly-queue/' | head -n1 | sed 's#.* refs/remotes/##')
	if [ "$r" ]; then
		echo "$r"
		return
	fi

	# see if this is a detached local branch
	l=$(git show-ref | grep "^$(git rev-parse @).* refs/heads" | head -n1 | sed 's#.* refs/heads/##')
	if [ "$l" ]; then
		echo "(detached at $l)"
		return
	fi

	# give up
	echo "(detached HEAD)"
}

prompt_command() {
	# save the status code before anything else; commands we execute in PS1 will overwrite it
	last_status=$?
	printf %s "($FAINT_YELLOW$(basename -- "${ZSH_ARGZERO:-$0}")$FAINT_WHITE@$FAINT_GREEN"; hostname | tr -d '\n'
	[ "$(id -u)" -eq 0 ] && printf %s "$RESET,${FAINT_RED}root"
	printf %s "$FAINT_WHITE) $FAINT_BLUE"
	display_pwd | tr -d '\n'
	git_info | tr -d '\n'
	echo
	# vscode already shows the cursor indented a bit, as well as the status from the last command
	if ! [ "$VSCODE_SHELL_INTEGRATION" = 1 ]; then
		if [ "$last_status" = 0 ]; then printf %s "$GREEN"; else printf %s "$RED"; fi
		printf '; '
	fi
	printf %s "$RESET"
}

PS1='$(prompt_command)'
# also reset the cursor mode (https://stackoverflow.com/a/59728228)
PS0=$(printf '\e[2 q')

stty -ixon
