[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

## Custom
umask 077

# don't add path if already present
add_path () {
	# (start or ':') $1 (end or ':')
	if ! echo "$PATH" | grep "\(^\|:\)$1\(\$\|:\)" > /dev/null; then
		PATH="$1:$PATH"
	fi
}

if [ -x "$(command -v xdg-open)" ]; then
	open () { xdg-open "$@"; }
fi

yts () { youtube_search "$@"; }

ytd () { youtube-dl "$@"; }

cls () { clear; }

mkcd () { mkdir -p "$@" && cd "$1"; }
mkdc () { mkcd "$@"; }

# follow symlinks by default
rg () { command rg -L "$@"; }

# show human-readable dates with offsets by default
dmesg () { command dmesg -e "$@"; }

dkr () { docker "$@"; }
dkrc () { docker-compose "$@"; }
# this shadows a mailcap command, but I've never used mailcap in my life
compose () { docker-compose "$@"; }

what_belongs () {
	if command -v dpkg > /dev/null; then
		dpkg -L "$@"
	elif command -v rpm > /dev/null; then
		rpm -ql "$@"
	else
		echo "no supported package manager found" >&2
	fi
}

what_runs () {
	for file in $(what_belongs "$@"); do
		[ -f "$file" ] && [ -x "$file" ] && echo "$file"
	done
}

what_package () {
	prog="$(realpath "$1")"; shift
	if command -v dpkg > /dev/null; then
		dpkg -S "$(command -v "$prog")" "$@"
	elif command -v rpm > /dev/null; then
		rpm -qf "$(command -v "$prog")" "$@"
	else
		echo "no supported package manager found" >&2
	fi
}

belongs () { what_belongs "$@"; }
runs () { what_runs "$@"; }
package () { what_package "$@"; }

exa () { command exa --git "$@"; }

# don't replace crontab without warning
crontab () { command crontab -i "$@"; }

# show a makefile as a dependency graph
visualize () {
	command -v makefile2graph > /dev/null || { echo "makefile2graph not found"; return 1; }
	command -v dot > /dev/null || { echo "dot not found"; return 1; }
	command -v xdot > /dev/null || { echo "xdot not found"; return 1; }
	makefile2graph | dot | xdot /dev/stdin
}

# don't show copyright every time (super annoying)
gdb () { command gdb -q "$@"; }

# for use with a makefile in the current directory
tasks () {
	make -npRr | \
	awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | \
	grep -v "^[#$(printf '\t')]" | sed 's/:.*$//'
}

# same as tasks, but show body of recipe
recipies () {
	make -npRr | \
	awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | \
	grep -v "^#"
}

# launch and disown a command
background () {
	if [ $# -eq 0 ]
		then echo usage: background '<command>'
		return 1
	else
		"$@" &
		disown
	fi
}

show_time () { watch -n 1 -t date; }

# zip recursively by default
zip () { command zip -r "$@"; }

powershell () { pwsh "$@"; }

save_power () { sudo powertop --auto-tune; }

clean_shell () {
    env -i HOME="$HOME" TERM="$TERM" "$(command -v bash)" --noprofile --rcfile /etc/profile
}

if ls --color=auto >/dev/null 2>/dev/null; then
   ls () { command ls --color=auto "$@"; }
else
   ls () { command ls -G "$@"; }
fi

# prompt before removing
rm () { command rm -i "$@"; }

purge_removed () {
	dpkg -l | awk '/^rc/ {print $2}' | xargs sudo dpkg --purge
}

purge () { sudo apt autoremove --purge "$@"; }

restart () { shutdown -r now; }

sl () { ls; }

ll () { ls -l "$@"; }

la () { ls -A "$@"; }

l () { ls -F "$@"; }

webpaste () {
   nc termbin.com 9999 < "$@"
}

webpaste () {
   nc termbin.com 9999 < "$@"
}

ascii () { man ascii; }

# files on disk
file_count () { locate -S; }

excuse () {
	telnet towel.blinkenlights.nl 666 2>/dev/null | tail -2 | cowsay -f dragon
}

status () { git status; }

dad () { curl https://icanhazdadjoke.com && echo; }

weather () { curl wttr.in/~University+Of+South+Carolina; }
wttr () { weather; }

pytime () { python -m timeit; }

ubuntu () { docker run -it ubuntu; }

vpn () { sudo openvpn --config /usr/local/etc/client.ovpn; }

view_markdown () {
	markdown_py -x extra "$1" > tmp.html && firefox tmp.html && sleep 1 && rm -f tmp.html
}

pip_upgrade_all () {
	pip list | awk '{print $1}' | tail --lines=+3 | xargs pip install -U "$@"
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alert () {
	notify-send --urgency=low \
	"$([ $? = 0 ] && echo terminal || echo error)" \
	"$(history | tail -1 | sed -e 's/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//')"
}

# https://stackoverflow.com/questions/9679932
npm_exec () {
	COMMAND="npm bin"
	if [ $# -gt 0 ] && [ "$1" = "-g" ]
		then COMMAND="$COMMAND --global"
		shift
	fi
	PATH="$($COMMAND):$PATH" "$@";
}

# modified from https://github.com/charlesdaniels/dotfiles/blob/master/overlay/.zsh/zsh-ocd.zsh
# when run without arguments, print all directories where there's an open file handle
# for the programs listed in FILTER_REGEX (currently bash and vim)
# when run with arguments,
#  if there is a unique match for the argument as a extended regex, change to that directory
#  else, print all directories which did match
ocd () {
	OCD_BLACKLIST_REGEX='(^[/]lib)|(^[/]usr[/]lib)|(^[/]$)|(^[/]var)|(^[/]bin)|(^[/]usr[/]share)|(^[/]usr[/]bin)|(^[/]usr[/]local[/]bin)|(^[/]tmp)|(^[/]dev)|(share[/]fonts)|([/][.]cache[/])|([.]swp$)|(^[/]run)'
	OCD_FILTER_REGEX='(^(ba|z)?sh)|(^[gn]?vim)'
	OCD_FILE_LIST=""

	if [ -x "$(command -v lsof 2>/dev/null)" ] ; then
		OCD_FILE_LIST="$(lsof -u $(whoami) | grep -E $OCD_FILTER_REGEX | awk '{print($9);}' | grep -P '^[/]' | grep -P -v $OCD_BLACKLIST_REGEX | sort | uniq)"
	fi

	# make sure everything in the file list is a directory
	OCD_DIRLIST=""
	for ocd_fpath in $(echo $OCD_FILE_LIST | tr '\n' ' ') ; do
		if [ -f "$ocd_fpath" ] ; then
			ocd_fpath="$(dirname "$ocd_fpath")"
		fi
		OCD_DIRLIST="$ocd_fpath
$OCD_DIRLIST"
	done

	OCD_TARGET="$(echo "$OCD_DIRLIST" | sort | uniq | grep -v -P '^$' | grep -P "$1")"
	if [ "$(echo "$OCD_TARGET" | wc -l)" -eq 1 ] ; then
		cd "$OCD_TARGET"
	else
		echo "$OCD_TARGET"
	fi
}


GITHUB='https://github.com/'
MY_GITHUB='https://github.com/jyn514'
SRC="/usr/local/src"

if [ -f ~/.local/profile ]; then
	. ~/.local/profile
fi

if [ -d ~/.local/bin ]; then
	add_path "$HOME/.local/bin"
fi

export ENV="$HOME/.profile"
export EDITOR=vim
export VISUAL=vim
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export JUPYTER_CONFIG_DIR=~/.config/jupyter
export JAVA_HOME=/usr/lib/jvm/default-java
export BAT_TABS=8

export MAKEFLAGS='-j4'
# for http://overthewire.org
# Honestly if you want to use this I don't really mind
export OTWUSERDIR="/d/SERPjdbrX3w3tsyXQQt0"

# bash shell and haven't sourced bashrc
if [ "$BASH_VERSION" ] && [ -n "$BASH_PROFILE_READ" ]; then
	. ~/.bashrc
fi

ansi_escape () {
	command printf "\01$1\02"
}

PROMPT_DIRTRIM=2

display_pwd () {
	# reimplementation of PROMPT_DIRTRIM in pure shell
	# 1. substitue $HOME with ~
	# 2. first group: match first character (~ or /)
	# 3. anything in the middle
	# 4. second group: last $PROMPT_DIRTRIM directories
	pwd | sed "s#$HOME#~#; s#^\(~\?/\).*\(\(/[^/]\+\)\{$PROMPT_DIRTRIM\}\)#\1...\2#"
}

RED="$(ansi_escape "\033[0;31m")"
GREEN="$(ansi_escape "\033[0;32m")"
YELLOW="$(ansi_escape "\033[0;33m")"
BLUE="$(ansi_escape "\033[0;34m")"
RESET="$(ansi_escape "\033[0;0m")"
PS1="($YELLOW$(basename -- "$0")$RESET@$GREEN$(hostname)"
[ "$(id -u)" -eq 0 ] && PS1="$PS1$RESET,${RED}root"
PS1="$PS1$RESET) $BLUE"'$(display_pwd)'"$RESET ▶️ "

add_path "$(dirname "$(dirname "$(realpath ~/.profile)")")/bin"
add_path ~/.node/bin
add_path ~/.cargo/bin
stty -ixon
l
