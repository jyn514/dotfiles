if [ -n "$BASH_PROFILE_READ" ]; then
	return 0
fi
BASH_PROFILE_READ=1
if [ -z $MY_GITHUB ]; then
   unalias ls la ll l alert 2>/dev/null
	source ~/.profile
fi
shopt -s histappend
shopt -s checkwinsize
[ "$BASH_VERSINFO" -gt 3 ] && shopt -s globstar
shopt -s checkhash
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

## History ##
# don't put duplicate lines in the history.
HISTCONTROL=ignoredups

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1  # never delete
#############

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
   debian_chroot=$(cat /etc/debian_chroot)
fi

# enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# https://unix.stackexchange.com/questions/245331
.. () { cd ..; }
function @ { HEAD "$@"; }
rust-gdb () { command rust-gdb -q "$@"; }

# list directory after changing
cd () {
	builtin cd "$@" && status
}

pure_shell() {
   env -i HOME="$HOME" TERM="$TERM" PS1='; ' HISTSIZE=-1 HISTFILE= bash --norc --noprofile
}

# bash-specific keybinds
# note: put things in inputrc instead if possible
bind '" ":magic-space'
bind '"\C-@":shell-expand-line'

# completion
complete_alias() {
   # https://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases#comment1466732_570866
   alias="$1"
   cmd="$2"
   # if this command's completion doesn't live on disk (e.g. zoxide), __load_completion will fail,
   # even though `complete -p` succeeds.
   if ! __load_completion "$cmd" && ! complete -p "$cmd" >/dev/null 2>&1; then
      echo "error: failed to load completion for $cmd" >&2
      return
   fi
   $(complete -p "$cmd" | rev | cut -d' ' -f 2- | rev) "$alias"
}
complete_alias c cargo
complete_alias g git
# jj has support for user-defined aliases. these can change between invocations, and even between
# one command ending and the other starting. refresh the completions between each invocation of jj.
if exists jj; then
   __jj_dynamic() {
      source <(jj util completion bash)
      _jj "$@"
      # `jj util completion` overrides our `complete` >:(
      complete -F __jj_dynamic -o nosort -o bashdefault -o default jj
   }
   complete -F __jj_dynamic -o nosort -o bashdefault -o default jj
fi
if exists zoxide; then
   source <(zoxide init bash)
   cd() { z "$@" && status; }
   complete_alias cd z
fi

[ -f ~/.local/bashrc ] && source ~/.local/bashrc

source ~/.local/lib/fzf-tab-completion/bash/fzf-bash-completion.sh
bind -x '"\t": fzf_bash_completion'

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
eval "$(atuin init bash --disable-up-arrow)"
eval "$(direnv hook bash)"
