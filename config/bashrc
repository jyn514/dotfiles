BASH_PROFILE_READ=1
if [ -z $MY_GITHUB ]; then
   unalias ls la ll l alert 2>/dev/null
	source ~/.profile
fi
shopt -s histappend
shopt -s checkwinsize
[ "$BASH_VERSINFO" -gt 3 ] && shopt -s globstar
shopt -s checkhash
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

## History ##
# don't put duplicate lines in the history.
HISTCONTROL=ignoredups

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1  # never delete
#############

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
   debian_chroot=$(cat /etc/debian_chroot)
fi

# use command-not-found package if installed
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
   function command_not_found_handle {
      case "$1" in
         # awawawa!
         awa|awawa|awawawa*) echo "$1!!!"; return $?;;
         # check if we forgot to put a space between `g` and the git subcommand
         g*) sub=${1#*g}
            if git --list-cmds=list-mainporcelain,others,nohelpers,alias,config | grep "^$sub$" --quiet; then
               shift
               g "$sub" "$@"
               return $?
            fi
      esac


      # check because c-n-f could've been removed in the meantime
      if [ -x /usr/lib/command-not-found ]; then
         /usr/lib/command-not-found -- "$1"
         return $?
      elif [ -x /usr/share/command-not-found/command-not-found ]; then
         /usr/share/command-not-found/command-not-found -- "$1"
         return $?
      else
         printf "%s: command not found\n" "$1" >&2
         return 127
      fi
   }
fi

export NVM_DIR="$HOME/.local/lib/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

if [ -f ~/.config/exercism/exercism_completion.bash ]; then
	. ~/.config/exercism/exercism_completion.bash
fi

# enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# https://unix.stackexchange.com/questions/245331
.. () { cd ..; }
function @ { HEAD "$@"; }
rust-gdb () { command rust-gdb -q "$@"; }

# list directory after changing
cd () {
	builtin cd "$@" && status
}

pure_shell() {
   env PS1='; ' HISTSIZE=-1 HISTFILE= bash --norc --noprofile
}

# completion
complete_alias() {
   # https://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases#comment1466732_570866
   alias="$1"
   cmd="$2"
   # if this command's completion doesn't live on disk (e.g. zoxide), __load_completion will fail,
   # even though `complete -p` succeeds.
   if ! __load_completion "$cmd" && ! complete -p "$cmd" >/dev/null 2>&1; then
      echo "error: failed to load completion for $cmd" >&2
      return
   fi
   $(complete -p "$cmd" | rev | cut -d' ' -f 2- | rev) "$alias"
}
complete_alias c cargo
complete_alias g git
if exists jj;     then source <(jj     util completion --bash); fi
if exists zoxide; then
   source <(zoxide init bash)
   cd() { z "$@" && status; }
   complete_alias cd z
fi

[ -f ~/.local/bashrc ] && source ~/.local/bashrc
