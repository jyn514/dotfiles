#!/usr/bin/env zsh
# docs: https://zsh.sourceforge.io/Doc/Release/index.html#Top
# to see the keymap, `bindkey` (-M for a specific keymap)
# running time on functions: `time (foo)`
# (unfortunately this can't be fixed automatically because `time` takes a whole pipeline as an argument, not a normal list of shell words)

# Set "$0" to zsh, not .profile
emulate sh
# Perform command substitution when evaluating prompt
setopt PROMPT_SUBST
# remove conflicting aliases
unalias ls la ll l alert 2>/dev/null
# Set up the prompt
. ~/.profile
emulate zsh

alias help=run-help
alias -g stauts=status
alias -g serach=search
alias -g searhc=search

pure_shell() {
   env -i HOME="$HOME" TERM="$TERM" PS1='; ' zsh --no-rcs --no-globalrcs
}

autoload -Uz promptinit
promptinit
PROMPT="$PS1"
POSTEDIT="$PS0"

setopt histignorealldups sharehistory correct
# append immediately, not on close
setopt incappendhistory
# allow `cd ..`
setopt autocd
# store all directories into the directory stack automatically
setopt autopushd

# save command in buffer before executing
bindkey "^Q" push-line
zle-vicmd-push() { zle push-line; zle vi-insert; }
zle-vicmd-copy() {
    zle vi-yank
    echo "$CUTBUFFER" | xclip -i -selection clipboard
}
zle-sudo() {
  zle up-line-or-history
  LBUFFER="sudo $LBUFFER"
}
zle -N zle-vicmd-push
zle -N zle-vicmd-copy
zle -N zle-sudo
bindkey -a "^Q" zle-vicmd-push
bindkey -a "y" zle-vicmd-copy
bindkey '^[k' zle-sudo
bindkey "^G" get-line
bindkey -a "^G" get-line
bindkey '^@' expand-word
bindkey -a '@' expand-word

# use emacs line editing for insert mode, ...
bindkey -e
# ... but escape still switches into vi command mode
bindkey "^[" vi-cmd-mode
# the default timeout is *just* short enough i sometimes hit esc-b fast enough ZLE counts it as a single command
KEYTIMEOUT=10
# show a line instead of a block in insert mode
# https://unix.stackexchange.com/a/765611/229104
__insert_mode() { printf "\e[5 q"; }
__command_mode() { printf "\e[2 q"; }
zle-keymap-select () {
    if [[ $KEYMAP == vicmd ]]; then
        __command_mode
    else
        # the insert mode for vi
        __insert_mode
    fi
}
zle-line-init() { __insert_mode; }
zle-line-finish() { __command_mode; }
# register our new widget
# https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Special-Widgets
zle -N zle-keymap-select
zle -N zle-line-init
zle -N zle-line-finish

# Alt + Right
bindkey ";3C" forward-word
# Alt + Left
bindkey ";3D" backward-word
# ctrl+left
bindkey ";5D" backward-word
# kitty passes \e[ but gnome-terminal doesn't :(
bindkey "\e[1;5D" backward-word
# ctrl+right
bindkey ";5C" forward-word
bindkey "\e[1;5C" forward-word

# by analogy with ^H
# this overrides clear-screen, but i don't care about clear-screen
bindkey "^L" delete-word
bindkey "^[h" backward-word
bindkey "^[l" forward-word
# these are backwards because i have them bound to vi keys
bindkey "${termcap[kN]}" backward-word
bindkey "${termcap[kP]}" forward-word

# properly bind Home, End, Delete (had trouble with this at one point)
# note: MUST come after 'bindkey -e'
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line
bindkey "\e[3~" delete-char
# tmux gets these as different scancodes apparently?
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
# ctrl+del
bindkey "5~" delete-word
bindkey "\e[3;5~" delete-word # tmux
# alt+del
bindkey "3~" delete-word
# ctrl+backspace
bindkey '^H' backward-delete-word

# space expands !... history
# TODO: see if we can make this more useful?
bindkey ' ' magic-space

# autoload -Uz surround
# zle -N delete-surround surround
# zle -N add-surround surround
# zle -N change-surround surround
# bindkey -a mc change-surround
# bindkey -a md delete-surround
# bindkey -a my add-surround
# bindkey -M visual S add-surround
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $m $c select-bracketed
  done
done

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=10000000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

# shift-tab cycles backwards through choices
bindkey '^[[Z' reverse-menu-complete

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
if exists dircolors; then
  eval "$(dircolors -b)"
fi
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
# fuzzy-matching, like fzf but it works even there is a partial prompt that's being completed
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=* m:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:gdb:*' command 'ps -A -o pid,tty,cmd'
zstyle ':completion:*' rehash true

COMPLETION=/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
if [ -e "$COMPLETION" ]; then
	. "$COMPLETION"
fi

if ! exists __builtin_gdb_complete; then
  autoload +X _gdb
  functions -c _gdb __builtin_gdb_complete
fi
# builtin completion is broken, lol, lmao
_gdb() {
  if [ "$words[CURRENT-1]" = '-p' ]; then
    _pids
  else
  __builtin_gdb_complete
 fi
}

if exists jj; then source <(jj util completion zsh); fi
if exists zoxide; then
   source <(zoxide init zsh)
   # zoxide is annoying and makes `z` an alias instead of a function
   cd() { __zoxide_z "$@" && status; }
        if ! exists __builtin_cd_complete; then
          autoload +X _cd
          functions -c _cd __builtin_cd_complete
        fi
	function _cd() {
		__builtin_cd_complete
		# Only show completions when the cursor is at the end of the line.
		# shellcheck disable=SC2154
		[[ "${#words[@]}" -eq "${CURRENT}" ]] || return 0
                IFS=$'\n' local comp=($(zoxide query --list))
		_describe 'directories' comp
	}
	# TODO: this doesn't work for some reason?
        compdef z=cd
	# functions -c _cd _z
fi

source ~/.local/lib/fzf-tab-completion/zsh/fzf-zsh-completion.sh
keys=(
    ctrl-r:'repeat-fzf-completion'
    tab:accept:'repeat-fzf-completion'
    right:accept:'zle reset-prompt'
    enter:accept:'zle accept-line'
)
zstyle ':completion:*' fzf-completion-keybindings "${keys[@]}"
# use / instead of tab to immediately trigger another completion, like `right`
zstyle ':completion::*:cd:*' fzf-completion-keybindings "${keys[@]}" /:accept:'repeat-fzf-completion'
bindkey '^I' fzf_completion

# really want to make this part of normal tab complete but i can't find a way to have zsh complete arbitrary file nesting :(
fzf-file() {
  local selected
  IFS=$'\n' selected=($(fd | fzf --expect=tab --no-sort --query="$BUFFER"))
  if [[ "$selected" ]]; then
    LBUFFER="$selected"
    if [[ ${#selected[@]} -eq 2 ]]; then
      LBUFFER="${selected[2]}"
      zle reset-prompt
    fi
  fi
  zle accept-line
}
zle -N fzf-file
bindkey "^[t" fzf-file

compdef _gnu_generic fzf

. $(dirname $(realpath ~/.profile))/../lib/antigen.zsh
antigen bundle zsh-users/zsh-autosuggestions>/dev/null
antigen apply

eval "$(atuin init zsh --disable-up-arrow)"
bindkey -M vicmd '^r' atuin-search
