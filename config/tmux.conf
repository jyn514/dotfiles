# https://man.openbsd.org/tmux#COMMANDS
# https://github.com/tmux/tmux/wiki/Getting-Started#key-bindings
# https://github.com/riley-martine/dotfiles/blob/master/tmux/.tmux.conf
# use <C-k /> to see what keys are called
# use <C-k :list-keys> to see what keys are bound to
# use <C-k :display-message> to print variables
# use <C-k :list-commands> to get a short summary of commands
# more notes in obsidian

set -g mouse on
set -g default-terminal "tmux-256color"
# no delay between hitting escape and sending it to the pane
set -s escape-time 0
# allow holding down a key to repeat it; the default timeout is too short
set -g repeat-time 600
# show status messages longer
set -g display-time 4000
# re-number windows when one is closed
set -g renumber-windows on
set -g set-titles on
set -g word-separators "'\"="
set -g history-limit 50000
set -g status-style bg=magenta,fg=white
set -g pane-active-border-style bg=default,fg=magenta
# allow nested programs to set the clipboard. by default only tmux sets the clipboard
set -s set-clipboard on
# allow nested programs to receive focus events
set -g focus-events on
# use primary selection by default, not secondary
set -g copy-command 'xsel -i'

# Renumber sessions
set-hook -g session-created "run ~/.config/tmux/renumber-sessions.sh"
set-hook -g session-closed  "run ~/.config/tmux/renumber-sessions.sh"

# show current working directory (shortened) in addition to running program
set -g automatic-rename-format "#{?#{==:#{pane_current_path},$HOME},~,#{b:pane_current_path}} (#{pane_current_command})"
# show when the prefix key is active; and the last time continuum saved
set -g status-right "#{?client_prefix,#[reverse]C-k#[noreverse] ,}\
#{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}\
#(awk -v save=$(tmux show-option -gqv @continuum-save-last-timestamp) -v now=$(date +%s) 'BEGIN { diff=now-save; printf \"s=%.0fm\", diff/60; }') \
\"#{=21:pane_title}\" %H:%M %d-%b-%y"


# needs at least tmux 3.4 :( https://superuser.com/a/1772457
# note that this needs to be set *at startup*, before a pane is opened
# fortunately this is just ignored on earlier versions
set-option -sa terminal-features ",*:hyperlinks"
# for WSL
set-option -sa terminal-features ",xterm-256color:RGB"
# set-option -sa terminal-features ",xterm-kitty:extkeys"
# none of my terminal emulators even support this lol
# set-option -sa terminal-features ",*:sixel"

# https://wiki.archlinux.org/title/tmux#Key_bindings
unbind C-b
set -g prefix C-k
bind-key \\ send-prefix

# use vi keybindings in copy mode
# e.g: C-k [ kkk ^ v $ Enter
set-window-option -g mode-keys vi
# NOTE: can still use C-v for rectangle selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
# v for visual mode
bind-key v copy-mode
# considering rebinding previous-window to P so we can switch it with paste
bind-key p paste-buffer -p
bind-key / copy-mode \; command-prompt -T search -p "(search up)" { send-keys -X search-backward -- "%%" }
bind-key ? command-prompt -k -p key { list-keys "%%" }

# https://stackoverflow.com/a/53745309/7669110
# vi keybindings for pane navigation and splitting
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key L split-window -h -c "#{pane_current_path}"
bind-key J split-window -v -c "#{pane_current_path}"
bind-key H split-window -h -b -c "#{pane_current_path}"
bind-key K split-window -v -b -c "#{pane_current_path}"
bind-key C-h swap-pane -d -t "{left-of}"
bind-key C-j swap-pane -d -t "{down-of}"
bind-key C-k swap-pane -d -t "{up-of}"
bind-key C-l swap-pane -d -t "{right-of}"
bind-key -r M-h resize-pane -L
bind-key -r M-j resize-pane -D
bind-key -r M-k resize-pane -U
bind-key -r M-l resize-pane -R
bind-key -r C-S-h swap-window -d -t -
bind-key -r C-S-l swap-window -d -t +
# C-o to swap two panels, M-o to swap reverse direction

# easier session switching
bind-key C new-session
bind-key N switch-client -n
bind-key M-N switch-client -p

bind-key t new-window -c "#{pane_current_path}"
bind-key Tab next-window
bind-key BTab previous-window
bind-key M-n previous-window
# matches vimium
bind-key W break-pane
# https://man.openbsd.org/tmux#Token
bind-key M-w join-pane -t !

# like ctrl+o in vscode
# see http://man.openbsd.org/OpenBSD-current/man1/tmux.1#choose-tree for keybindings
bind-key o choose-tree -wZ
bind-key O choose-tree -sZ

# now we have choose-tree bound to something else, we can remap w
bind-key w confirm-before -p "kill-window #W? (y/n)" kill-window
 
# get back normal terminal emulator bindings
bind-key -n S-PPage copy-mode -u
bind-key -T copy-mode -n S-NPage send-keys -X page-down

# keep emacs bindings in vi mode
bind-key -T copy-mode-vi -n Home send-keys -X history-top
bind-key -T copy-mode-vi -n End send-keys -X history-bottom

# don't scroll to end when copying with mouse
bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe
bind-key -T copy-mode    DoubleClick1Pane  select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe
bind-key -T copy-mode    TripleClick1Pane  select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe
bind-key -T copy-mode-vi DoubleClick1Pane  select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe
bind-key -T copy-mode-vi TripleClick1Pane  select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe

# paste from primary selection on mouse down, not clipboard
bind-key -T root MouseDown2Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } {
  run "xclip -o -selection primary | tmux load-buffer -b primary_selection -; tmux paste-buffer -b primary_selection -d"
}
# same, but use clipboard for right click
bind-key -T root MouseDown3Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } {
  run "xclip -o -selection clipboard | tmux load-buffer -b clipboard -; tmux paste-buffer -b clipboard -d"
}
# all the same things, but with keybindings now
bind-key -T prefix p run "xclip -o -selection primary   | tmux load-buffer -b primary_selection -; tmux paste-buffer -b primary_selection -d"
bind-key -T prefix P run "xclip -o -selection clipboard | tmux load-buffer -b clipboard         -; tmux paste-buffer -b clipboard -d"

# open a drag and drop window
bind-key -T copy-mode C-o send-keys -X copy-pipe-and-cancel "cd \"#{pane_current_path}\"; xargs -I {} dragon -x {}"
bind-key -T copy-mode-vi C-o send-keys -X copy-pipe-and-cancel "cd \"#{pane_current_path}\"; xargs -I {} dragon -x {}"
bind-key -n C-MouseDown1Pane select-pane -t = \; if-shell -F '#{mouse_hyperlink}' { run-shell -b "cd \"#{pane_current_path}\"; dragon -x #{mouse_hyperlink}" }
bind-key -n C-DoubleClick1Pane select-pane -t = \; run-shell -b "cd \"#{pane_current_path}\"; dragon -x #{mouse_word}"
bind-key -n C-TripleClick1Pane select-pane -t = \; run-shell -b "cd \"#{pane_current_path}\"; dragon -x #{mouse_line}"

# open hyperlinks on double-click; select on single-click
bind-key -n M-DoubleClick1Pane select-pane -t = \; if-shell -F '#{mouse_hyperlink}' { run-shell 'echo #{mouse_hyperlink} | xclip -in -selection clipboard' } { send-keys -M }
bind-key -n M-MouseDown1Pane   select-pane -t = \; if-shell -F '#{mouse_hyperlink}' { run-shell 'open #{mouse_hyperlink}' } { copy-mode -H ; send-keys -X select-word ; run-shell -d 0.3 ; send-keys -X copy-pipe-and-cancel }

# scroll shouldn't change pane focus
bind-key -T root WheelUpPane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } {
	if-shell -F "#{alternate_on}" { send-keys -N 3 Up } { copy-mode -t= -e }
}
bind-key -T copy-mode    WheelUpPane   send-keys -t = -X -N 5 scroll-up
bind-key -T copy-mode-vi WheelUpPane   send-keys -t = -X -N 5 scroll-up
bind-key -T copy-mode    WheelDownPane send-keys -t = -X -N 5 scroll-down
bind-key -T copy-mode-vi WheelDownPane send-keys -t = -X -N 5 scroll-down

# load some environment variables at startup
run-shell "$HOME/.config/tmux/set-env.sh"

# Reload ~/.tmux.conf
bind-key r source-file ~/.config/tmux/tmux.conf #\; display "TMUX configuration is reloaded!"
# Edit ~/.tmux.conf
bind-key e run-shell "hx-hax $HOME/.config/tmux/tmux.conf"

# f: file search
# unbound: git files
# g: git hashes
# u: urls
# C-d: numbers
# M-i: ips
# include line and column numbers in file search
# rebind `f` so we can reuse it here
bind-key -T prefix C-f command-prompt { find-window -Z "%%" }
# i am so sorry
# see `search-regex.sh` for wtf this means
# TODO: include shell variable names
bind-key f copy-mode \; send-keys -X search-backward '(^|/|\<|[[:space:]"])((\.|\.\.)|[[:alnum:]~_"-]*)((/[][[:alnum:]_.#$%&+=@"-]+)+([/ "]|\.([][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)(:[0-9]+)?)|(/[][[:alnum:]_.#$%&+=@"-]+){2,}([/ "]|\.([][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)(:[0-9]+)?)?|(\.|\.\.)/([][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)?(:[0-9]+)?))'
# urls
bind-key u copy-mode \; send-keys -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&*+-]*'
# hashes
bind-key g copy-mode \; send-keys -X search-backward '\b([0-9a-f]{7,40}|[[:alnum:]]{52}|[0-9a-f]{64})\b'
# ips
bind-key M-i copy-mode \; send-keys -X search-backward '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}'
 
# copy-mode o: xdg-open
# copy-mode O: $EDITOR
# copy-mode s: search with google
# copy-mode Tab: paste the filename in the shell line editor

# `cd` is important in case this is a relative path. `echo | bash` is to perform tilde expansion.
bind-key -T copy-mode-vi o send-keys -X copy-pipe 'cd #{pane_current_path}; xargs -I {} echo "echo {}" | bash | xargs open' \; if -F "#{alternate_on}" { send-keys -X cancel }
# save the buffer, then open an editor in the current pane
bind-key -T copy-mode-vi O send-keys -X copy-pipe-and-cancel 'tmux send-keys "C-q"; xargs -I {} tmux send-keys "${EDITOR:-vi} {}"; tmux send-keys "C-m"'
# search for the highlighted text
bind-key -T copy-mode-vi s send-keys -X copy-pipe "cd #{pane_current_path}; xargs -I {} open 'https://www.google.com/search?q={}'" \; if -F "#{alternate_on}" { send-keys -X cancel }
# save buffer and retype into the shell
bind-key -T copy-mode-vi Tab send-keys -X copy-selection-and-cancel \; paste-buffer -p

# C-s: save layout
# C-r: restore layout
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes '"hx *" "bacon *" "nvim -S"'
# TODO: once https://github.com/helix-editor/helix/issues/401 lands, restore that state too
set -g @plugin 'jyn514/tmux-resurrect#split-pane'
# set -g @continuum-restore 'on'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'

# if there is an existing detached session, use that instead of starting a new session
set-option -g @resurrect-hook-pre-restore-all  '$HOME/.config/tmux/attach-session.sh disable'
set-option -g @resurrect-hook-post-restore-all '$HOME/.config/tmux/attach-session.sh enable'

# TODO: breaks tmux-cssh
set-hook -g session-created { run-shell "$HOME/.config/tmux/attach-session.sh 2>&1 | logger -t tmux-session" }
